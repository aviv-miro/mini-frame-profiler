!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.miniFrameProfiler=t():e.miniFrameProfiler=t()}(this,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{measureFramesWithTimer:()=>a});var n,r=function(){function e(e){this.sortedFrameTimes=[],this.median=null,this.mean=null,this.p99=null,this.p95=null,this.zScores=null,this.zScoresMean=null,this.stdDev=null,this.frameTimes=Array.isArray(e)?e:e.frameTimes,this.sortedFrameTimes=this.frameTimes.slice().sort((function(e,t){return e-t})),this.median=this.calcMedian(),this.p99=this.calcPercentile(99),this.p95=this.calcPercentile(95),this.mean=this.calcMean(),this.stdDev=this.calcStdDev(),this.zScores=this.calcZScores(),this.zScoresMean=this.calcZScoresMean()}return e.prototype.calcPercentile=function(e){var t=Math.floor(this.sortedFrameTimes.length*(e/100));return this.sortedFrameTimes[t]},e.prototype.calcMedian=function(){return this.calcPercentile(50)},e.prototype.calcMean=function(){for(var e=0,t=0;t<this.frameTimes.length;t++)e+=this.frameTimes[t];return e/this.frameTimes.length},e.prototype.calcStdDev=function(){for(var e=this.mean||this.calcMean(),t=0,n=0;n<this.frameTimes.length;n++)t+=Math.pow(this.frameTimes[n]-e,2);return Math.sqrt(t/this.frameTimes.length)},e.prototype.calcZScores=function(){for(var e=this.mean||this.calcMean(),t=this.stdDev||this.calcStdDev(),n=[],r=0;r<this.frameTimes.length;r++)n.push((this.frameTimes[r]-e)/t);return n},e.prototype.calcZScoresMean=function(){for(var e=0,t=0;t<this.zScores.length;t++)e+=this.zScores[t];return e/this.zScores.length},e.prototype.filterOutliersByZScore=function(t){var n=this;return void 0===t&&(t=2),new e(this.frameTimes.filter((function(e,r){return Math.abs(n.zScores[r])<t})))},e.prototype.getStatistics=function(){return{p95:this.p95,p99:this.p99,mean:this.mean,median:this.median,stdDev:this.stdDev,zScoresMean:this.zScoresMean}},e}(),i=function(){function e(){this.frameTimes=[],this.lastTime=1/0,this.isMeasuring=!1}return e.prototype.start=function(){this.isMeasuring||(this.isMeasuring=!0,this.measure())},e.prototype.stop=function(){this.isMeasuring=!1,this.lastTime=1/0},e.prototype.statistics=function(){if(!this.isMeasuring)return new r(this.frameTimes);console.warn("You should stop measuring before getting statistics.")},e.prototype.measure=function(){var e=this;if(this.isMeasuring){requestAnimationFrame((function(){return e.measure()}));var t=performance.now();this.lastTime>t||this.frameTimes.push(t-this.lastTime),this.lastTime=t}},e.measureFramesWithTimer=function(){return t=this,n=arguments,i=function(t,n){var r,i,o;return void 0===t&&(t=5),void 0===n&&(n=0),function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(s){return r=new e,i=1e3*t,o=1e3*n,console.log("Measuring frames for ".concat(t," seconds, starting in ").concat(n," seconds...")),[2,new Promise((function(e){setTimeout((function(){console.log("Starting measuring frames."),r.start(),setTimeout((function(){r.stop(),console.log("Finished measuring frames."),e(r)}),i)}),o)}))]}))},new((r=void 0)||(r=Promise))((function(e,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,a)}c((i=i.apply(t,n||[])).next())}));var t,n,r,i},e}(),o=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},s=function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};function a(e,t){return o(this,void 0,void 0,(function(){return s(this,(function(n){return[2,i.measureFramesWithTimer(e,t)]}))}))}return n=function(){console.log('Library "miniFrameProfiler" is ready!'),window.MFP=window.miniFrameProfiler},"complete"!==document.readyState?window.addEventListener("load",(function(){return n&&n()})):n&&n(),t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,